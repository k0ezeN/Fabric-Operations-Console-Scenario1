/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var peer_chaincode_event_pb = require('../peer/chaincode_event_pb.js');
goog.object.extend(proto, peer_chaincode_event_pb);
var peer_transaction_pb = require('../peer/transaction_pb.js');
goog.object.extend(proto, peer_transaction_pb);
goog.exportSymbol('proto.protos.ChaincodeReg', null, global);
goog.exportSymbol('proto.protos.DeliverResponse', null, global);
goog.exportSymbol('proto.protos.Event', null, global);
goog.exportSymbol('proto.protos.EventType', null, global);
goog.exportSymbol('proto.protos.FilteredBlock', null, global);
goog.exportSymbol('proto.protos.FilteredChaincodeAction', null, global);
goog.exportSymbol('proto.protos.FilteredTransaction', null, global);
goog.exportSymbol('proto.protos.FilteredTransactionActions', null, global);
goog.exportSymbol('proto.protos.Interest', null, global);
goog.exportSymbol('proto.protos.Register', null, global);
goog.exportSymbol('proto.protos.Rejection', null, global);
goog.exportSymbol('proto.protos.SignedEvent', null, global);
goog.exportSymbol('proto.protos.Unregister', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeReg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeReg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ChaincodeReg.displayName = 'proto.protos.ChaincodeReg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ChaincodeReg.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ChaincodeReg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ChaincodeReg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeReg.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeReg}
 */
proto.protos.ChaincodeReg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ChaincodeReg;
  return proto.protos.ChaincodeReg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeReg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeReg}
 */
proto.protos.ChaincodeReg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChaincodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeReg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ChaincodeReg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeReg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeReg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string chaincode_id = 1;
 * @return {string}
 */
proto.protos.ChaincodeReg.prototype.getChaincodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ChaincodeReg.prototype.setChaincodeId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event_name = 2;
 * @return {string}
 */
proto.protos.ChaincodeReg.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ChaincodeReg.prototype.setEventName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.Interest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.Interest.oneofGroups_);
};
goog.inherits(proto.protos.Interest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.Interest.displayName = 'proto.protos.Interest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.Interest.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.protos.Interest.ReginfoCase = {
  REGINFO_NOT_SET: 0,
  CHAINCODE_REG_INFO: 2
};

/**
 * @return {proto.protos.Interest.ReginfoCase}
 */
proto.protos.Interest.prototype.getReginfoCase = function() {
  return /** @type {proto.protos.Interest.ReginfoCase} */(jspb.Message.computeOneofCase(this, proto.protos.Interest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.Interest.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.Interest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.Interest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Interest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chaincodeRegInfo: (f = msg.getChaincodeRegInfo()) && proto.protos.ChaincodeReg.toObject(includeInstance, f),
    chainid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.Interest}
 */
proto.protos.Interest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.Interest;
  return proto.protos.Interest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.Interest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.Interest}
 */
proto.protos.Interest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protos.EventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 2:
      var value = new proto.protos.ChaincodeReg;
      reader.readMessage(value,proto.protos.ChaincodeReg.deserializeBinaryFromReader);
      msg.setChaincodeRegInfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.Interest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.Interest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.Interest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Interest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChaincodeRegInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protos.ChaincodeReg.serializeBinaryToWriter
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional EventType event_type = 1;
 * @return {!proto.protos.EventType}
 */
proto.protos.Interest.prototype.getEventType = function() {
  return /** @type {!proto.protos.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protos.EventType} value */
proto.protos.Interest.prototype.setEventType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChaincodeReg chaincode_reg_info = 2;
 * @return {?proto.protos.ChaincodeReg}
 */
proto.protos.Interest.prototype.getChaincodeRegInfo = function() {
  return /** @type{?proto.protos.ChaincodeReg} */ (
    jspb.Message.getWrapperField(this, proto.protos.ChaincodeReg, 2));
};


/** @param {?proto.protos.ChaincodeReg|undefined} value */
proto.protos.Interest.prototype.setChaincodeRegInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.protos.Interest.oneofGroups_[0], value);
};


proto.protos.Interest.prototype.clearChaincodeRegInfo = function() {
  this.setChaincodeRegInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Interest.prototype.hasChaincodeRegInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string chainID = 3;
 * @return {string}
 */
proto.protos.Interest.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.Interest.prototype.setChainid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.Register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.Register.repeatedFields_, null);
};
goog.inherits(proto.protos.Register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.Register.displayName = 'proto.protos.Register';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.Register.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.Register.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.Register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.Register} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Register.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.protos.Interest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.Register}
 */
proto.protos.Register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.Register;
  return proto.protos.Register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.Register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.Register}
 */
proto.protos.Register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.Interest;
      reader.readMessage(value,proto.protos.Interest.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.Register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.Register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.Register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Register.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protos.Interest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Interest events = 1;
 * @return {!Array<!proto.protos.Interest>}
 */
proto.protos.Register.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.protos.Interest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.Interest, 1));
};


/** @param {!Array<!proto.protos.Interest>} value */
proto.protos.Register.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protos.Interest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.Interest}
 */
proto.protos.Register.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protos.Interest, opt_index);
};


proto.protos.Register.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.Rejection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.Rejection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.Rejection.displayName = 'proto.protos.Rejection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.Rejection.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.Rejection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.Rejection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Rejection.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: (f = msg.getTx()) && peer_transaction_pb.Transaction.toObject(includeInstance, f),
    errorMsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.Rejection}
 */
proto.protos.Rejection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.Rejection;
  return proto.protos.Rejection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.Rejection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.Rejection}
 */
proto.protos.Rejection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new peer_transaction_pb.Transaction;
      reader.readMessage(value,peer_transaction_pb.Transaction.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.Rejection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.Rejection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.Rejection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Rejection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      peer_transaction_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getErrorMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Transaction tx = 1;
 * @return {?proto.protos.Transaction}
 */
proto.protos.Rejection.prototype.getTx = function() {
  return /** @type{?proto.protos.Transaction} */ (
    jspb.Message.getWrapperField(this, peer_transaction_pb.Transaction, 1));
};


/** @param {?proto.protos.Transaction|undefined} value */
proto.protos.Rejection.prototype.setTx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protos.Rejection.prototype.clearTx = function() {
  this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Rejection.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error_msg = 2;
 * @return {string}
 */
proto.protos.Rejection.prototype.getErrorMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.Rejection.prototype.setErrorMsg = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.Unregister = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.Unregister.repeatedFields_, null);
};
goog.inherits(proto.protos.Unregister, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.Unregister.displayName = 'proto.protos.Unregister';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.Unregister.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.Unregister.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.Unregister.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.Unregister} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Unregister.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.protos.Interest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.Unregister}
 */
proto.protos.Unregister.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.Unregister;
  return proto.protos.Unregister.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.Unregister} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.Unregister}
 */
proto.protos.Unregister.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.Interest;
      reader.readMessage(value,proto.protos.Interest.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.Unregister.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.Unregister.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.Unregister} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Unregister.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protos.Interest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Interest events = 1;
 * @return {!Array<!proto.protos.Interest>}
 */
proto.protos.Unregister.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.protos.Interest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.Interest, 1));
};


/** @param {!Array<!proto.protos.Interest>} value */
proto.protos.Unregister.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protos.Interest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.Interest}
 */
proto.protos.Unregister.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protos.Interest, opt_index);
};


proto.protos.Unregister.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.FilteredBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.FilteredBlock.repeatedFields_, null);
};
goog.inherits(proto.protos.FilteredBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.FilteredBlock.displayName = 'proto.protos.FilteredBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.FilteredBlock.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.FilteredBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.FilteredBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.FilteredBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filteredTransactionsList: jspb.Message.toObjectList(msg.getFilteredTransactionsList(),
    proto.protos.FilteredTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.FilteredBlock}
 */
proto.protos.FilteredBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.FilteredBlock;
  return proto.protos.FilteredBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.FilteredBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.FilteredBlock}
 */
proto.protos.FilteredBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 4:
      var value = new proto.protos.FilteredTransaction;
      reader.readMessage(value,proto.protos.FilteredTransaction.deserializeBinaryFromReader);
      msg.addFilteredTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.FilteredBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.FilteredBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.FilteredBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFilteredTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protos.FilteredTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.protos.FilteredBlock.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.FilteredBlock.prototype.setChannelId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 number = 2;
 * @return {number}
 */
proto.protos.FilteredBlock.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protos.FilteredBlock.prototype.setNumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated FilteredTransaction filtered_transactions = 4;
 * @return {!Array<!proto.protos.FilteredTransaction>}
 */
proto.protos.FilteredBlock.prototype.getFilteredTransactionsList = function() {
  return /** @type{!Array<!proto.protos.FilteredTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.FilteredTransaction, 4));
};


/** @param {!Array<!proto.protos.FilteredTransaction>} value */
proto.protos.FilteredBlock.prototype.setFilteredTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protos.FilteredTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.FilteredTransaction}
 */
proto.protos.FilteredBlock.prototype.addFilteredTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protos.FilteredTransaction, opt_index);
};


proto.protos.FilteredBlock.prototype.clearFilteredTransactionsList = function() {
  this.setFilteredTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.FilteredTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.FilteredTransaction.oneofGroups_);
};
goog.inherits(proto.protos.FilteredTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.FilteredTransaction.displayName = 'proto.protos.FilteredTransaction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.FilteredTransaction.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.protos.FilteredTransaction.DataCase = {
  DATA_NOT_SET: 0,
  TRANSACTION_ACTIONS: 4
};

/**
 * @return {proto.protos.FilteredTransaction.DataCase}
 */
proto.protos.FilteredTransaction.prototype.getDataCase = function() {
  return /** @type {proto.protos.FilteredTransaction.DataCase} */(jspb.Message.computeOneofCase(this, proto.protos.FilteredTransaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.FilteredTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.FilteredTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.FilteredTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txValidationCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactionActions: (f = msg.getTransactionActions()) && proto.protos.FilteredTransactionActions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.FilteredTransaction}
 */
proto.protos.FilteredTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.FilteredTransaction;
  return proto.protos.FilteredTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.FilteredTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.FilteredTransaction}
 */
proto.protos.FilteredTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {!proto.common.HeaderType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.protos.TxValidationCode} */ (reader.readEnum());
      msg.setTxValidationCode(value);
      break;
    case 4:
      var value = new proto.protos.FilteredTransactionActions;
      reader.readMessage(value,proto.protos.FilteredTransactionActions.deserializeBinaryFromReader);
      msg.setTransactionActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.FilteredTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.FilteredTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.FilteredTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTxValidationCode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTransactionActions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protos.FilteredTransactionActions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string txid = 1;
 * @return {string}
 */
proto.protos.FilteredTransaction.prototype.getTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.FilteredTransaction.prototype.setTxid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional common.HeaderType type = 2;
 * @return {!proto.common.HeaderType}
 */
proto.protos.FilteredTransaction.prototype.getType = function() {
  return /** @type {!proto.common.HeaderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.common.HeaderType} value */
proto.protos.FilteredTransaction.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TxValidationCode tx_validation_code = 3;
 * @return {!proto.protos.TxValidationCode}
 */
proto.protos.FilteredTransaction.prototype.getTxValidationCode = function() {
  return /** @type {!proto.protos.TxValidationCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.protos.TxValidationCode} value */
proto.protos.FilteredTransaction.prototype.setTxValidationCode = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional FilteredTransactionActions transaction_actions = 4;
 * @return {?proto.protos.FilteredTransactionActions}
 */
proto.protos.FilteredTransaction.prototype.getTransactionActions = function() {
  return /** @type{?proto.protos.FilteredTransactionActions} */ (
    jspb.Message.getWrapperField(this, proto.protos.FilteredTransactionActions, 4));
};


/** @param {?proto.protos.FilteredTransactionActions|undefined} value */
proto.protos.FilteredTransaction.prototype.setTransactionActions = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.protos.FilteredTransaction.oneofGroups_[0], value);
};


proto.protos.FilteredTransaction.prototype.clearTransactionActions = function() {
  this.setTransactionActions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.FilteredTransaction.prototype.hasTransactionActions = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.FilteredTransactionActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.FilteredTransactionActions.repeatedFields_, null);
};
goog.inherits(proto.protos.FilteredTransactionActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.FilteredTransactionActions.displayName = 'proto.protos.FilteredTransactionActions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.FilteredTransactionActions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.FilteredTransactionActions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.FilteredTransactionActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.FilteredTransactionActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredTransactionActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincodeActionsList: jspb.Message.toObjectList(msg.getChaincodeActionsList(),
    proto.protos.FilteredChaincodeAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.FilteredTransactionActions}
 */
proto.protos.FilteredTransactionActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.FilteredTransactionActions;
  return proto.protos.FilteredTransactionActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.FilteredTransactionActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.FilteredTransactionActions}
 */
proto.protos.FilteredTransactionActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.FilteredChaincodeAction;
      reader.readMessage(value,proto.protos.FilteredChaincodeAction.deserializeBinaryFromReader);
      msg.addChaincodeActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.FilteredTransactionActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.FilteredTransactionActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.FilteredTransactionActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredTransactionActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincodeActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protos.FilteredChaincodeAction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FilteredChaincodeAction chaincode_actions = 1;
 * @return {!Array<!proto.protos.FilteredChaincodeAction>}
 */
proto.protos.FilteredTransactionActions.prototype.getChaincodeActionsList = function() {
  return /** @type{!Array<!proto.protos.FilteredChaincodeAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.FilteredChaincodeAction, 1));
};


/** @param {!Array<!proto.protos.FilteredChaincodeAction>} value */
proto.protos.FilteredTransactionActions.prototype.setChaincodeActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protos.FilteredChaincodeAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.FilteredChaincodeAction}
 */
proto.protos.FilteredTransactionActions.prototype.addChaincodeActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protos.FilteredChaincodeAction, opt_index);
};


proto.protos.FilteredTransactionActions.prototype.clearChaincodeActionsList = function() {
  this.setChaincodeActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.FilteredChaincodeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.FilteredChaincodeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.FilteredChaincodeAction.displayName = 'proto.protos.FilteredChaincodeAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.FilteredChaincodeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.FilteredChaincodeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.FilteredChaincodeAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredChaincodeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincodeEvent: (f = msg.getChaincodeEvent()) && peer_chaincode_event_pb.ChaincodeEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.FilteredChaincodeAction}
 */
proto.protos.FilteredChaincodeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.FilteredChaincodeAction;
  return proto.protos.FilteredChaincodeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.FilteredChaincodeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.FilteredChaincodeAction}
 */
proto.protos.FilteredChaincodeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new peer_chaincode_event_pb.ChaincodeEvent;
      reader.readMessage(value,peer_chaincode_event_pb.ChaincodeEvent.deserializeBinaryFromReader);
      msg.setChaincodeEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.FilteredChaincodeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.FilteredChaincodeAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.FilteredChaincodeAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredChaincodeAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincodeEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      peer_chaincode_event_pb.ChaincodeEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChaincodeEvent chaincode_event = 1;
 * @return {?proto.protos.ChaincodeEvent}
 */
proto.protos.FilteredChaincodeAction.prototype.getChaincodeEvent = function() {
  return /** @type{?proto.protos.ChaincodeEvent} */ (
    jspb.Message.getWrapperField(this, peer_chaincode_event_pb.ChaincodeEvent, 1));
};


/** @param {?proto.protos.ChaincodeEvent|undefined} value */
proto.protos.FilteredChaincodeAction.prototype.setChaincodeEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protos.FilteredChaincodeAction.prototype.clearChaincodeEvent = function() {
  this.setChaincodeEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.FilteredChaincodeAction.prototype.hasChaincodeEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.SignedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.SignedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.SignedEvent.displayName = 'proto.protos.SignedEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.SignedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.SignedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.SignedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.SignedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    eventbytes: msg.getEventbytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.SignedEvent}
 */
proto.protos.SignedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.SignedEvent;
  return proto.protos.SignedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.SignedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.SignedEvent}
 */
proto.protos.SignedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEventbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.SignedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.SignedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.SignedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.SignedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEventbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.protos.SignedEvent.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.protos.SignedEvent.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.protos.SignedEvent.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.SignedEvent.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes eventBytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protos.SignedEvent.prototype.getEventbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes eventBytes = 2;
 * This is a type-conversion wrapper around `getEventbytes()`
 * @return {string}
 */
proto.protos.SignedEvent.prototype.getEventbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEventbytes()));
};


/**
 * optional bytes eventBytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEventbytes()`
 * @return {!Uint8Array}
 */
proto.protos.SignedEvent.prototype.getEventbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEventbytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.SignedEvent.prototype.setEventbytes = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.Event.oneofGroups_);
};
goog.inherits(proto.protos.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.Event.displayName = 'proto.protos.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.Event.oneofGroups_ = [[1,2,3,4,5,7]];

/**
 * @enum {number}
 */
proto.protos.Event.EventCase = {
  EVENT_NOT_SET: 0,
  REGISTER: 1,
  BLOCK: 2,
  CHAINCODE_EVENT: 3,
  REJECTION: 4,
  UNREGISTER: 5,
  FILTERED_BLOCK: 7
};

/**
 * @return {proto.protos.Event.EventCase}
 */
proto.protos.Event.prototype.getEventCase = function() {
  return /** @type {proto.protos.Event.EventCase} */(jspb.Message.computeOneofCase(this, proto.protos.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    register: (f = msg.getRegister()) && proto.protos.Register.toObject(includeInstance, f),
    block: (f = msg.getBlock()) && common_common_pb.Block.toObject(includeInstance, f),
    chaincodeEvent: (f = msg.getChaincodeEvent()) && peer_chaincode_event_pb.ChaincodeEvent.toObject(includeInstance, f),
    rejection: (f = msg.getRejection()) && proto.protos.Rejection.toObject(includeInstance, f),
    unregister: (f = msg.getUnregister()) && proto.protos.Unregister.toObject(includeInstance, f),
    filteredBlock: (f = msg.getFilteredBlock()) && proto.protos.FilteredBlock.toObject(includeInstance, f),
    creator: msg.getCreator_asB64(),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    tlsCertHash: msg.getTlsCertHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.Event}
 */
proto.protos.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.Event;
  return proto.protos.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.Event}
 */
proto.protos.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.Register;
      reader.readMessage(value,proto.protos.Register.deserializeBinaryFromReader);
      msg.setRegister(value);
      break;
    case 2:
      var value = new common_common_pb.Block;
      reader.readMessage(value,common_common_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 3:
      var value = new peer_chaincode_event_pb.ChaincodeEvent;
      reader.readMessage(value,peer_chaincode_event_pb.ChaincodeEvent.deserializeBinaryFromReader);
      msg.setChaincodeEvent(value);
      break;
    case 4:
      var value = new proto.protos.Rejection;
      reader.readMessage(value,proto.protos.Rejection.deserializeBinaryFromReader);
      msg.setRejection(value);
      break;
    case 5:
      var value = new proto.protos.Unregister;
      reader.readMessage(value,proto.protos.Unregister.deserializeBinaryFromReader);
      msg.setUnregister(value);
      break;
    case 7:
      var value = new proto.protos.FilteredBlock;
      reader.readMessage(value,proto.protos.FilteredBlock.deserializeBinaryFromReader);
      msg.setFilteredBlock(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCreator(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTlsCertHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegister();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.Register.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getChaincodeEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      peer_chaincode_event_pb.ChaincodeEvent.serializeBinaryToWriter
    );
  }
  f = message.getRejection();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protos.Rejection.serializeBinaryToWriter
    );
  }
  f = message.getUnregister();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protos.Unregister.serializeBinaryToWriter
    );
  }
  f = message.getFilteredBlock();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protos.FilteredBlock.serializeBinaryToWriter
    );
  }
  f = message.getCreator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTlsCertHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional Register register = 1;
 * @return {?proto.protos.Register}
 */
proto.protos.Event.prototype.getRegister = function() {
  return /** @type{?proto.protos.Register} */ (
    jspb.Message.getWrapperField(this, proto.protos.Register, 1));
};


/** @param {?proto.protos.Register|undefined} value */
proto.protos.Event.prototype.setRegister = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.protos.Event.oneofGroups_[0], value);
};


proto.protos.Event.prototype.clearRegister = function() {
  this.setRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Event.prototype.hasRegister = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional common.Block block = 2;
 * @return {?proto.common.Block}
 */
proto.protos.Event.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Block, 2));
};


/** @param {?proto.common.Block|undefined} value */
proto.protos.Event.prototype.setBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.protos.Event.oneofGroups_[0], value);
};


proto.protos.Event.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Event.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChaincodeEvent chaincode_event = 3;
 * @return {?proto.protos.ChaincodeEvent}
 */
proto.protos.Event.prototype.getChaincodeEvent = function() {
  return /** @type{?proto.protos.ChaincodeEvent} */ (
    jspb.Message.getWrapperField(this, peer_chaincode_event_pb.ChaincodeEvent, 3));
};


/** @param {?proto.protos.ChaincodeEvent|undefined} value */
proto.protos.Event.prototype.setChaincodeEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.protos.Event.oneofGroups_[0], value);
};


proto.protos.Event.prototype.clearChaincodeEvent = function() {
  this.setChaincodeEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Event.prototype.hasChaincodeEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Rejection rejection = 4;
 * @return {?proto.protos.Rejection}
 */
proto.protos.Event.prototype.getRejection = function() {
  return /** @type{?proto.protos.Rejection} */ (
    jspb.Message.getWrapperField(this, proto.protos.Rejection, 4));
};


/** @param {?proto.protos.Rejection|undefined} value */
proto.protos.Event.prototype.setRejection = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.protos.Event.oneofGroups_[0], value);
};


proto.protos.Event.prototype.clearRejection = function() {
  this.setRejection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Event.prototype.hasRejection = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Unregister unregister = 5;
 * @return {?proto.protos.Unregister}
 */
proto.protos.Event.prototype.getUnregister = function() {
  return /** @type{?proto.protos.Unregister} */ (
    jspb.Message.getWrapperField(this, proto.protos.Unregister, 5));
};


/** @param {?proto.protos.Unregister|undefined} value */
proto.protos.Event.prototype.setUnregister = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.protos.Event.oneofGroups_[0], value);
};


proto.protos.Event.prototype.clearUnregister = function() {
  this.setUnregister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Event.prototype.hasUnregister = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FilteredBlock filtered_block = 7;
 * @return {?proto.protos.FilteredBlock}
 */
proto.protos.Event.prototype.getFilteredBlock = function() {
  return /** @type{?proto.protos.FilteredBlock} */ (
    jspb.Message.getWrapperField(this, proto.protos.FilteredBlock, 7));
};


/** @param {?proto.protos.FilteredBlock|undefined} value */
proto.protos.Event.prototype.setFilteredBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.protos.Event.oneofGroups_[0], value);
};


proto.protos.Event.prototype.clearFilteredBlock = function() {
  this.setFilteredBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Event.prototype.hasFilteredBlock = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes creator = 6;
 * @return {!(string|Uint8Array)}
 */
proto.protos.Event.prototype.getCreator = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes creator = 6;
 * This is a type-conversion wrapper around `getCreator()`
 * @return {string}
 */
proto.protos.Event.prototype.getCreator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCreator()));
};


/**
 * optional bytes creator = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCreator()`
 * @return {!Uint8Array}
 */
proto.protos.Event.prototype.getCreator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCreator()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.Event.prototype.setCreator = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.protos.Event.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.protos.Event.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.protos.Event.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.Event.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes tls_cert_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.protos.Event.prototype.getTlsCertHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes tls_cert_hash = 9;
 * This is a type-conversion wrapper around `getTlsCertHash()`
 * @return {string}
 */
proto.protos.Event.prototype.getTlsCertHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTlsCertHash()));
};


/**
 * optional bytes tls_cert_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTlsCertHash()`
 * @return {!Uint8Array}
 */
proto.protos.Event.prototype.getTlsCertHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTlsCertHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.Event.prototype.setTlsCertHash = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.DeliverResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.DeliverResponse.oneofGroups_);
};
goog.inherits(proto.protos.DeliverResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.DeliverResponse.displayName = 'proto.protos.DeliverResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.DeliverResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.protos.DeliverResponse.TypeCase = {
  TYPE_NOT_SET: 0,
  STATUS: 1,
  BLOCK: 2,
  FILTERED_BLOCK: 3
};

/**
 * @return {proto.protos.DeliverResponse.TypeCase}
 */
proto.protos.DeliverResponse.prototype.getTypeCase = function() {
  return /** @type {proto.protos.DeliverResponse.TypeCase} */(jspb.Message.computeOneofCase(this, proto.protos.DeliverResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.DeliverResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.DeliverResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.DeliverResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.DeliverResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block: (f = msg.getBlock()) && common_common_pb.Block.toObject(includeInstance, f),
    filteredBlock: (f = msg.getFilteredBlock()) && proto.protos.FilteredBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.DeliverResponse}
 */
proto.protos.DeliverResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.DeliverResponse;
  return proto.protos.DeliverResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.DeliverResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.DeliverResponse}
 */
proto.protos.DeliverResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new common_common_pb.Block;
      reader.readMessage(value,common_common_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 3:
      var value = new proto.protos.FilteredBlock;
      reader.readMessage(value,proto.protos.FilteredBlock.deserializeBinaryFromReader);
      msg.setFilteredBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.DeliverResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.DeliverResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.DeliverResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.DeliverResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.common.Status} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getFilteredBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protos.FilteredBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Status status = 1;
 * @return {!proto.common.Status}
 */
proto.protos.DeliverResponse.prototype.getStatus = function() {
  return /** @type {!proto.common.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.common.Status} value */
proto.protos.DeliverResponse.prototype.setStatus = function(value) {
  jspb.Message.setOneofField(this, 1, proto.protos.DeliverResponse.oneofGroups_[0], value);
};


proto.protos.DeliverResponse.prototype.clearStatus = function() {
  jspb.Message.setOneofField(this, 1, proto.protos.DeliverResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeliverResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional common.Block block = 2;
 * @return {?proto.common.Block}
 */
proto.protos.DeliverResponse.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Block, 2));
};


/** @param {?proto.common.Block|undefined} value */
proto.protos.DeliverResponse.prototype.setBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.protos.DeliverResponse.oneofGroups_[0], value);
};


proto.protos.DeliverResponse.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeliverResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FilteredBlock filtered_block = 3;
 * @return {?proto.protos.FilteredBlock}
 */
proto.protos.DeliverResponse.prototype.getFilteredBlock = function() {
  return /** @type{?proto.protos.FilteredBlock} */ (
    jspb.Message.getWrapperField(this, proto.protos.FilteredBlock, 3));
};


/** @param {?proto.protos.FilteredBlock|undefined} value */
proto.protos.DeliverResponse.prototype.setFilteredBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.protos.DeliverResponse.oneofGroups_[0], value);
};


proto.protos.DeliverResponse.prototype.clearFilteredBlock = function() {
  this.setFilteredBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeliverResponse.prototype.hasFilteredBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.protos.EventType = {
  REGISTER: 0,
  BLOCK: 1,
  CHAINCODE: 2,
  REJECTION: 3,
  FILTEREDBLOCK: 4
};

goog.object.extend(exports, proto.protos);
